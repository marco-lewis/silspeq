?start: (func_spec)*

?func_spec: func "(" defs ")" "->" "(" defs ")" pre post -> funcspec

?pre: "pre" "{" stmts "}" -> pre

?post: "post" "{" stmts "}" -> post

?func: NAME

?defs: (def ("," def)*)?
?def: "define" NAME ":" type    -> def

?type: NAT
    | "{" "0" "," "1" "}" ("^" NUMBER)? -> int

?stmts: (stmt)*
?stmt: def 
| "assert" "(" lexpr ")"        -> assertion

?lexpr: numexpr
    | "(" lexpr ")"
    | numexpr "=" numexpr       -> eq
    | numexpr "leq" numexpr     -> le
    | lexpr "&" lexpr           -> and
    | lexpr "|" lexpr           -> or
    | lexpr "=>" lexpr          -> implies
    | lexpr "<=>" lexpr         -> equiv
    | "¬" lexpr                 -> not
    | "@" NAME "." lexpr        -> forall
    | "#" NAME "." lexpr        -> exists

?numexpr: NUMBER
    | NAME                      -> var
    | numexpr "+" numexpr       -> add
    | numexpr "-" numexpr       -> sub
    | numexpr "*" numexpr       -> mul
    | numexpr "/" numexpr       -> div
    | numexpr "^" numexpr       -> pow
    | "(" numexpr ")"
    | func "(" args ")"         -> call
    | "SUM" "[" NAME "]" "(" numexpr ")"    -> sum

?args: (arg ("," arg)*)?        -> args
?arg: NAME

NAT: "N" | "ℕ"

%import common.CNAME -> NAME
%import common.NUMBER
%import common.WS

%ignore WS