?start: (func_spec)* -> specs

?func_spec: func ("[" funcflags "]")? "(" (defs)? ")" "->" "(" (defs)? ")" pre post -> funcspec

?funcflags: funcflag ("," funcflag)*
?funcflag: "qout"               -> qout
        | "cert"                -> cert
        | "whp"                 -> highprob
        | "atval"               -> atvalue

?pre: "pre" "{" stmts "}" -> pre

?post: "post" "{" stmts "}" -> post

?func: NAME

?defs: def ("," def)*
?def: "define" ("[" defflags "]")? NAME ":" type    -> definition

?defflags: defflag ("," defflag)*
?defflag: "oracle"              -> oracle

?type: NAT                              -> nat
    | "(" ")"                           -> unit
    | bool                              -> bool
    | bool "^" NUMBER                   -> int
    | type ("->" type)+                 -> function
    | "!" type                          -> classical

?bool: BOOL
    | "{" "0" "," "1" "}"

?stmts: (stmt)*
?stmt: def 
| "assert" "(" lexpr ")"        -> assertion

?lexpr: "(" lexpr ")"
    | TRUE                      -> true
    | FALSE                     -> false
    | numexpr
    | numexpr "=" numexpr       -> eq
    | numexpr ">" numexpr       -> gt
    | numexpr "<" numexpr       -> lt
    | numexpr ">=" numexpr      -> ge
    | numexpr "<=" numexpr      -> le
    | lexpr "&" lexpr           -> land
    | lexpr "|" lexpr           -> lor
    | lexpr "->" lexpr          -> implies
    | lexpr "<->" lexpr         -> equiv
    | "¬" lexpr                 -> lnot
    | "@" NAME "." lexpr        -> forall
    | "$" NAME "." lexpr        -> exists

?numexpr: NUMBER
    | NAME                      -> var
    | "(" numexpr ")"
    | "-" numexpr               -> neg
    | numexpr "+" numexpr       -> add
    | numexpr "-" numexpr       -> sub
    | numexpr "*" numexpr       -> mul
    | numexpr "/" numexpr       -> div
    | numexpr "^" numexpr       -> pow
    | func "(" args ")"         -> call
    | "SUM" "[" NAME "]" "(" numexpr ")"    -> sum

?args: (arg ("," arg)*)?        -> args
?arg: NAME | NUMBER

TRUE: "⊤" | "tt"
FALSE: "⊥" | "ff"

BOOL : "B" | "𝔹"
NAT: "N" | "ℕ"

%import common.CNAME -> NAME
%import common.NUMBER
%import common.WS
%import common.SH_COMMENT

%ignore WS
%ignore SH_COMMENT